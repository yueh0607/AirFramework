using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace AirFramework
{


    /******************************************************************************************************************
     * KCP基本原理：
     * 
     * 1.发送方切分长数据为多个数据包
     * 2.发送方为数据包绑定编号(Una)，指定接收窗口(Wnd)的剩余大小
     * 3.接收方在收到包之后要回发ACK(只有头的数据包)
     * 4.接收方收到数据包需要按顺序排列，并处理数据（不需要包全部到达，但需要从首个包开始顺序处理）
     * 5.发送方在没有收到ACK超时时需要重发数据片
     * 
     * 
     * 优化：
     * 
     * 1.快速重传和冗余ACK：
     * A,B,C包同时发送，接收方收到了A并回发ACK，收到了C，连续发送多次C的ACK，使得发送方意识到B丢失触发重传
     * 使得不需要等待B的ACK超时，完成快速重传
     * 
     * 2.延迟确认
     * ACK包不必立刻回发，而是等待多个ACK同时一起发送，避免ACK泛滥造成拥堵，也能减少流量损失
     * 
     * 3.拥塞窗口调整： 
     * KCP协议实现了拥塞控制机制，根据网络状况自适应地调整拥塞窗口大小，以避免网络拥塞。
     * 除了接收窗口（Wnd），还有一个流量控制窗口用于限制发送方发送的数据量，以避免过度拥塞。
     * KCP协议通过对发送方发送速率进行平滑调整，以避免突发的数据发送导致网络拥塞。
     * 
     * 4.快速恢复： 
     * 在遇到丢包时，KCP协议采用快速恢复机制，通过减半拥塞窗口来降低发送方的发送速率，然后逐渐增加。
     ********************************************************************************************************************/


    public class KCPSendQueue 
    {
        
    }
}
